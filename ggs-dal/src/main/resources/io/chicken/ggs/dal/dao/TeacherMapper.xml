<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="io.chicken.ggs.dal.dao.TeacherMapper" >
    <!-- 返回结果表-->
    <resultMap id="BaseResultMap" type="io.chicken.ggs.common.vo.TeacherList" >
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="teacherid" property="teacherid" jdbcType="VARCHAR" />
        <result column="teaname" property="teaname" jdbcType="VARCHAR" />
        <result column="teasex" property="teasex" jdbcType="VARCHAR" />
        <result column="teaclass" property="teaclass" jdbcType="VARCHAR" />
        <result column="teaschool" property="teaschool" jdbcType="VARCHAR" />
        <result column="teacomment" property="teacomment" jdbcType="VARCHAR" />
    </resultMap>
    <!-- 参数表-->
    <resultMap id="TeacherQueryParamMap" type="io.chicken.ggs.common.vo.TeacherQueryParam" >
        <result column="pageNum" property="pageNum" jdbcType="VARCHAR" />
        <result column="pageSize" property="pageSize" jdbcType="VARCHAR" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="schoolname" property="schoolname" jdbcType="VARCHAR" />
        <result column="areaname" property="areaname" jdbcType="VARCHAR" />
        <result column="schooltype" property="schooltype" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
    id, teacherid, name, sex, classname, schoolcode,remark
  </sql>
  <select id="queryList" resultMap="BaseResultMap">
    select tea.id, tea.teacherid, tea.name teaname, tea.sex teasex, tea.classname teaclass, sch.name teaschool,tea.remark teacomment
    from teacher tea
    left join school sch
    on tea.schoolcode=sch.schoolcode
    left join dictionary dic
    on sch.areacode=dic.bizcode or sch.schooltype=dic.bizcode
      <where>
          1=1
          <if test="teaMap.name != null and teaMap.name.trim() != ''">
              and tea.name like concat('%',#{teaMap.name},'%')
          </if>
          <if test="teaMap.schoolname != null and teaMap.schoolname != ''">
              and sch.name = #{teaMap.schoolname}
          </if>
          <if test="teaMap.areaname != null and teaMap.areaname != ''">
              and dic.datavalue = #{teaMap.areaname}
          </if>
          <if test="teaMap.schooltype != null and teaMap.schooltype != ''" >
              and 1=1
          </if>
      </where>
      order by teacherid asc
      <if test="start != null and last != null">
          limit #{start}, #{last}
      </if>
  </select>

  <select id="queryTotal" resultType="java.lang.Long" >
    select COALESCE(count(*),0)
    from teacher tea
    left join school sch
    on tea.schoolcode=sch.schoolcode
    left join dictionary dic
    on sch.areacode=dic.bizcode or sch.schooltype=dic.bizcode
      <where>
          1=1
          <if test="teaMap.name != null and teaMap.name.trim() != ''">
              and tea.name like concat('%',#{teaMap.name},'%')
          </if>
          <if test="teaMap.schoolname != null and teaMap.schoolname != ''">
              and sch.name = #{teaMap.schoolname}
          </if>
          <if test="teaMap.areaname != null and teaMap.areaname != ''">
              and dic.datavalue = #{teaMap.areaname}
          </if>
          <if test="teaMap.schooltype != null and teaMap.schooltype != ''" >
              and 1=1
          </if>
      </where>
      order by teacherid asc
      <if test="start != null and last != null">
          limit #{start}, #{last}
      </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from teacher
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from teacher
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="io.chicken.ggs.dal.model.Teacher" >
    insert into teacher (id, teacherid, name, 
      sex, classname, school_id
      )
    values (#{id,jdbcType=BIGINT}, #{teacherid,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{sex,jdbcType=VARCHAR}, #{classname,jdbcType=VARCHAR}, #{schoolId,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="io.chicken.ggs.dal.model.Teacher" >
    insert into teacher
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="teacherid != null" >
        teacherid,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="classname != null" >
        classname,
      </if>
      <if test="schoolId != null" >
        school_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="teacherid != null" >
        #{teacherid,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="classname != null" >
        #{classname,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        #{schoolId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="io.chicken.ggs.dal.model.Teacher" >
    update teacher
    <set >
      <if test="teacherid != null" >
        teacherid = #{teacherid,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="classname != null" >
        classname = #{classname,jdbcType=VARCHAR},
      </if>
      <if test="schoolId != null" >
        school_id = #{schoolId,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.chicken.ggs.dal.model.Teacher" >
    update teacher
    set teacherid = #{teacherid,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      sex = #{sex,jdbcType=VARCHAR},
      classname = #{classname,jdbcType=VARCHAR},
      school_id = #{schoolId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>